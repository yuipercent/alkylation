#include <stdint.h>
#include <stdio.h>

#ifndef ALKC_COREINITD

#include "../core/alkore.h"
#endif

typedef struct NaphToolsARG_Rectangle{
	int PX;
	int PY;
	unsigned int DX;
	unsigned int DY;
}NaphtRect;

#define _NAPHTOOLS_ASINTRINSICS(VarName,Color)				\
	_NAPHTOOLS_REGTYPE VarName = 0;					\
	for (int fill = 0; fill < Color.Size/8; ++fill); {};		\

#define _NAPHTOOLS_LAUNCHCONSTRUCT(FName)			\
								\
	void NaphToolsQUERY_##FName(VT_naphtha* CNaphtA,	\
	NaphtRect Args, uint64_t color) {			\
		int BPP = (int)(CNaphtA->FORMAT.Size/8);	\
		int apx = Args.PX * BPP;			\
		int apy = Args.PY * BPP;			\
		int adx = Args.DX * BPP;			\
		int ady = Args.DY * BPP;			\
		_NAPHTOOLS_ASINTRINSICS(IntriCol,CNaphtA->FORMAT);

#define _NAPHTOOLS_CONSTRUCTPROTOCOL()					\
									\
	void* ColorMap	 = malloc(_NTASBYTES_(RegisterSize));		\
									\
	int mlpx = (int)(adx/BPSIMD);					\
	int mlpy = (int)(ady/BPSIMD);					\
	__m##RegisterSize##i* naphtarray = 				\
	(__m##RegisterSize##i*) CNaphtA->naphtArray;			\
	uint8_t* naphtbytes = (uint8_t*) ColorMap;			\
									\
	for (int fill = 0; fill < ColorMapSz; ++fill) {			\
		naphtbytes[fill] = (uint8_t)				\
		((color >> ((fill % BPP)*8))%256);			\
		};							\
	__m128 temp = _mm_load_ps(&src[i]);				\
									\
	for (int cpx = apx; cpx < mlpx ; ++cpx ) {			\
	for (int cpy = apy; cpy < mlpy ; ++cpy ) {			\
									\
		};};							\
	free(ColorMap);							\
	};

_NAPHTOOLS_LAUNCHCONSTRUCT( REGULARFILL );
_NAPHTOOLS_CONSTRUCTPROTOCOL();

